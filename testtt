local Calculator = {}

-- Constants for pet types and their XP levels
Calculator.PetTypes = {
    Unique = {0, 1250, 3750, 7500, 12500, 18750, 26250, 35000, 45000, 56250, 68750, 82500, 97500, 113750, 131250, 150000, 170000, 191250, 213750, 237500},
    Epic = {0, 1000, 3000, 6000, 10000, 15000, 21000, 28000, 36000, 45000, 55000, 66000, 78000, 91000, 105000, 120000, 136000, 153000, 171000, 190000, 210000},
    Rare = {0, 750, 2250, 4500, 7500, 11250, 15750, 21000, 27000, 33750, 41250, 49500, 58500, 68250, 78750, 90000, 102000, 114750, 128250, 142500, 157500},
    Advanced = {0, 500, 1500, 3000, 5000, 7500, 10500, 14000, 18000, 22500, 27500, 33000, 39000, 45500, 52500, 60000, 68000, 76500, 85500, 95000, 105000},
    Basic = {0, 250, 750, 1500, 2500, 3750, 5250, 7000, 9000, 11250, 13750, 16500, 19500, 22750, 26250, 30000, 34000, 38250, 42750, 47500, 52500}
}

-- Rock types and their multipliers
Calculator.Rocks = {
    { name = 'Jungle Rock', multiplier = 16.25 },
    { name = 'Muscle King Rock', multiplier = 12.5 },
    { name = 'Legends Rock', multiplier = 2.5 },
    { name = 'Inferno Rock', multiplier = 1.125 },
    { name = 'Mystic Rock', multiplier = 0.75 },
    { name = 'Frozen Rock', multiplier = 0.375 },
    { name = 'Golden Rock', multiplier = 0.2 },
    { name = 'Large Rock', multiplier = 0.075 },
    { name = 'Punching Rock', multiplier = 0.05 },
    { name = 'Tiny Rock', multiplier = 0.025 }
}

-- Create a lookup table for rocks to improve performance
Calculator.RockLookup = {}
for _, rock in ipairs(Calculator.Rocks) do
    Calculator.RockLookup[rock.name] = rock.multiplier
end

-- Calculate rock XP based on rebirths, rock name, and pet type
function Calculator:CalculateRock(rebirths, rockName, petType)
    -- Find the rock multiplier
    local multiplier = self.RockLookup[rockName]
    if not multiplier then
        -- Try to find it in the array if not in lookup
        for _, rock in ipairs(self.Rocks) do
            if rock.name == rockName then
                multiplier = rock.multiplier
                break
            end
        end
        
        if not multiplier then
            return "Rock not found"
        end
    end
    
    local xpLevels = self.PetTypes[petType]
    if not xpLevels then
        return "Pet type not found"
    end
    
    -- Calculate total XP based on rebirths and rock multiplier
    local total = (rebirths + 20) * multiplier
    
    -- Check if total exceeds max level
    if total >= xpLevels[#xpLevels] then
        return "UnGlitchable (exceeds max level)"
    end
    
    -- Find the next XP level
    local nextXP = nil
    for i, xp in ipairs(xpLevels) do
        if xp > total then
            nextXP = xp
            break
        end
    end
    
    if not nextXP then
        return "UnGlitchable (calculation error)"
    end
    
    -- Calculate the difference between next XP level and total
    local difference = nextXP - total
    
    -- Check if difference is exactly 0 (perfect level up)
    if difference == 0 then
        -- Find the index of nextXP
        local nextLevel = 1
        for i, xp in ipairs(xpLevels) do
            if xp == nextXP then
                nextLevel = i
                break
            end
        end
        return "Level " .. nextLevel .. ", 0xp"
    end
    
    -- Find the level based on where difference falls in the XP levels
    local level = 1
    for i = 2, #xpLevels do
        if difference <= xpLevels[i] then
            level = i - 1
            break
        end
    end
    
    -- Calculate the remaining XP
    local baseXP = xpLevels[level]
    local remainingXP = math.floor(difference - baseXP)
    
    return "Level " .. level .. ", " .. remainingXP .. "xp"
end

return Calculator
