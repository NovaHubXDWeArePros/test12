--[[
    Protected Calculator Module for Lurnai
    Â© 2025 Havoc - All Rights Reserved
]]

-- Create a secure environment with closure protection
local Calculator = (function()
    -- Internal module
    local module = {}
    
    -- Security constants (obfuscated)
    local SECURITY = {
        AUTH_KEY = string.char(76,117,114,110,97,105,95,72,97,118,111,99,95,65,117,116,104), -- "Lurnai_Havoc_Auth"
        SCRIPT_NAME = string.char(76,117,114,110,97,105,32,45,32,70,114,101,101,32,86,101,114,115,105,111,110), -- "Lurnai - Free Version"
        AUTHOR = string.char(72,97,118,111,99), -- "Havoc"
        UI_LIB = string.char(70,108,117,101,110,116), -- "Fluent"
        FLOOD_COUNT = 500
    }
    
    -- Set up data for the calculator
    module.Rocks = {
        {name = "Muscle Rock", multiplier = 1},
        {name = "Strength Rock", multiplier = 2},
        {name = "Legendary Rock", multiplier = 5},
        {name = "Mythical Rock", multiplier = 10},
        {name = "Omega Rock", multiplier = 20},
        {name = "Muscle King Rock", multiplier = 50}
    }
    
    module.PetTypes = {
        ["Common"] = 1.1,
        ["Uncommon"] = 1.2,
        ["Rare"] = 1.5,
        ["Epic"] = 2,
        ["Legendary"] = 3,
        ["Mythical"] = 5,
        ["Unique"] = 10
    }
    
    -- Internal state
    local _internal = {
        loadTime = os.time(),
        verificationHash = string.char(76,117,114,110,97,105,95,86,101,114,105,102,105,101,100), -- "Lurnai_Verified"
        isBroken = false
    }
    
    -- Expose some internal state for verification
    module._loadTime = _internal.loadTime
    module._verificationHash = _internal.verificationHash
    module._isBroken = _internal.isBroken
    
    -- Utility functions
    local function floodConsole()
        for i = 1, SECURITY.FLOOD_COUNT do
            print("")
        end
    end
    
    -- Store original environment functions to prevent hooking
    local originalEnvFunctions = {
        debug = {
            getinfo = debug.getinfo,
            traceback = debug.traceback,
            getupvalue = debug.getupvalue,
            getlocal = debug.getlocal
        },
        string = {
            find = string.find,
            match = string.match,
            sub = string.sub,
            char = string.char
        },
        table = {
            concat = table.concat
        }
    }
    
    -- Verify the environment hasn't been tampered with
    local function verifyEnvironment()
        -- Check if debug functions have been tampered with
        if debug.getinfo ~= originalEnvFunctions.debug.getinfo or
           debug.traceback ~= originalEnvFunctions.debug.traceback then
            return false
        end
        
        -- Check if string functions have been tampered with
        if string.find ~= originalEnvFunctions.string.find or
           string.match ~= originalEnvFunctions.string.match or
           string.sub ~= originalEnvFunctions.string.sub then
            return false
        end
        
        return true
    end
    
    -- Generate a hash for data integrity checks
    local function generateHash(data)
        local hash = 0
        for i = 1, #data do
            hash = (hash * 31 + string.byte(data, i)) % 2^32
        end
        return hash
    end
    
    -- Store real data for integrity checks
    local realData = {
        rocks = module.Rocks,
        petTypes = module.PetTypes
    }
    local dataHash = generateHash(tostring(realData))
    
    -- Verify the UI script contains all required verification markers
    local function verifyUIScript()
        local success, result = pcall(function()
            -- Get the call stack to find the UI script
            local callStack = debug.traceback()
            
            -- Required verification markers that must be present in the UI script
            local requiredMarkers = {
                "7hgf_vrf: 0x8A2B3C4D",
                "q9zx_vrf: 0xF1E2D3C4",
                "3kpt_vrf: 0x1A2B3C4D",
                "p5jq_vrf: 0xE5D6C7B8",
                "8rgt_vrf: 0x9A8B7C6D",
                "2xnm_vrf: 0x5F4E3D2C",
                "6yht_vrf: 0xB1A2C3D4",
                "4zxc_vrf: 0x7D8E9F0A",
                "1jkl_vrf: 0x2B3C4D5E",
                "9qwe_vrf: 0xC1D2E3F4",
                "5rty_vrf: 0x3E4F5A6B",
                "0uio_vrf: 0xD4C5B6A7",
                "7asd_vrf: 0x8F9E0D1C",
                "2fgh_vrf: 0x5A6B7C8D",
                "8jkl_vrf: 0x9E0F1A2B",
                "3zxc_vrf: 0x1D2E3F4A",
                "6vbn_vrf: 0xB4C5D6E7",
                "1mnb_vrf: 0x2E3F4A5B",
                "9poi_vrf: 0xC4D5E6F7",
                "4lkj_vrf: 0x7G8H9I0J",
                "5hgf_vrf: 0x3K4L5M6N",
                "0dsa_vrf: 0xD7E8F9G0",
                "7yui_vrf: 0x8O9P0Q1R",
                "2tre_vrf: 0x5S6T7U8V",
                "8iop_vrf: 0x9W0X1Y2Z",
                "3qwe_vrf: 0x1A2B3C4D5",
                "6rty_vrf: 0xB5C6D7E8F",
                "1uio_vrf: 0x2G3H4I5J6",
                "9asd_vrf: 0xC7D8E9F0G",
                "4fgh_vrf: 0x7K8L9M0N1",
                "5jkl_vrf: 0x3O4P5Q6R7",
                "0zxc_vrf: 0xD9E0F1G2H",
                "7vbn_vrf: 0x8S9T0U1V2",
                "2mnb_vrf: 0x5W6X7Y8Z9",
                "8poi_vrf: 0x9A0B1C2D3E",
                "3lkj_vrf: 0x1F2G3H4I5J",
                "6hgf_vrf: 0xB4C5D6E7F8",
                "1dsa_vrf: 0x2K3L4M5N6O",
                "9yui_vrf: 0xC7D8E9F0G1",
                "4tre_vrf: 0x7P8Q9R0S1T",
                "0iop_vrf: 0xD2E3F4G5H6",
                "7qwe_vrf: 0x8U9V0W1X2Y",
                "2rty_vrf: 0x5N6O7P8Q9R",
                "8uio_vrf: 0x9S0T1U2V3W",
                "3asd_vrf: 0x1X2Y3Z4A5B",
                "6fgh_vrf: 0xB8C9D0E1F2",
                "1jkl_vrf: 0x2G3H4I5J6K",
                "9zxc_vrf: 0xC3D4E5F6G7",
                "4vbn_vrf: 0x7L8M9N0O1P",
                "5mnb_vrf: 0x3Q4R5S6T7U",
                "0poi_vrf: 0xD8E9F0G1H2",
                "7lkj_vrf: 0x8V9W0X1Y2Z"
            }
            
            -- Try to get the UI script source
            local uiScriptSource = ""
            local success, err = pcall(function()
                -- This is a bit tricky - we need to find the UI script in the call stack
                -- and then get its source. This is a simplified approach.
                for i = 2, 5 do  -- Check a few levels up the call stack
                    local info = debug.getinfo(i, "S")
                    if info and info.source then
                        -- Found a potential UI script, now try to get its source
                        local func = debug.getinfo(i, "f").func
                        local lines = debug.getlines(func)
                        if lines then
                            uiScriptSource = table.concat(lines, "\n")
                        end
                        break
                    end
                end
            end)
            
            -- If we couldn't get the source directly, try to check the environment
            if uiScriptSource == "" then
                -- Try to check if the verification markers are in the environment
                local env = getfenv(2)
                local envStr = tostring(env)
                
                -- Check if at least some markers are in the environment string
                local markerCount = 0
                for _, marker in ipairs(requiredMarkers) do
                    if envStr:find(marker:gsub("%-", "%%-")) then
                        markerCount = markerCount + 1
                    end
                end
                
                -- If we found at least 25 markers, consider it valid
                if markerCount >= 25 then
                    return true
                end
                
                -- Check the call stack as a last resort
                local markerCount = 0
                for _, marker in ipairs(requiredMarkers) do
                    if callStack:find(marker:gsub("%-", "%%-")) then
                        markerCount = markerCount + 1
                    end
                end
                
                -- If we found at least 25 markers in the call stack, consider it valid
                return markerCount >= 25
            end
            
            -- Check if at least 25 required markers are in the UI script source
            local markerCount = 0
            for _, marker in ipairs(requiredMarkers) do
                if uiScriptSource:find(marker:gsub("%-", "%%-")) then
                    markerCount = markerCount + 1
                end
            end
            
            return markerCount >= 25
        end)
        
        return success and result
    end
    
    -- Verify authenticity of the script
    function module:VerifyAuthenticity()
        -- Verify environment hasn't been tampered with
        if not verifyEnvironment() then
            floodConsole()
            return false
        end
        
        -- Verify UI script contains required verification markers
        if not verifyUIScript() then
            floodConsole()
            return false
        end
        
        -- Verify data integrity
        if generateHash(tostring(realData)) ~= dataHash then
            floodConsole()
            return false
        end
        
        -- Verify this module hasn't been renamed
        local info = originalEnvFunctions.debug.getinfo(1, "f")
        if info and info.func ~= module.VerifyAuthenticity then
            floodConsole()
            return false
        end
        
        -- Verify the module was loaded recently
        if os.time() - _internal.loadTime > 60 then
            floodConsole()
            return false
        }
        
        return true
    end
    
    -- Calculate rock values
    function module:CalculateRock(rebirths, rockName, petType)
        -- Verify authenticity before calculating
        if not self:VerifyAuthenticity() then
            return "Verification failed. Please reload the script."
        }
        
        -- Find the rock by name
        local selectedRock = nil
        for _, rock in ipairs(self.Rocks) do
            if rock.name == rockName then
                selectedRock = rock
                break
            end
        end
        
        if not selectedRock then
            return "Invalid rock selected"
        end
        
        -- Get pet multiplier
        local petMultiplier = self.PetTypes[petType] or 1
        
        -- Calculate base value
        local baseValue = 100 * selectedRock.multiplier
        
        -- Apply rebirth bonus (5% per rebirth)
        local rebirthBonus = 1 + (rebirths * 0.05)
        
        -- Apply pet multiplier
        local finalValue = baseValue * rebirthBonus * petMultiplier
        
        -- Format the result
        return string.format("Rock Value: %.2f strength", finalValue)
    end
    
    -- Return the module
    return module
end)()

return Calculator
